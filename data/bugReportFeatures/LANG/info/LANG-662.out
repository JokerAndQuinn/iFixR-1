{
	"desc":"\n\nThe greatestCommonDivisor method in class Fraction does not find the gcd of Integer.MIN_VALUE and 2^k, and this case can be triggered by taking Integer.MIN_VALUE as the numerator. Note that the case of taking Integer.MIN_VALUE as the denominator is handled explicitly in the getReducedFraction factory method.\nFractionTest.java\n	// additional test cases\n	public void testReducedFactory_int_int() {\n		// ...\n		f = Fraction.getReducedFraction(Integer.MIN_VALUE, 2);\n		assertEquals(Integer.MIN_VALUE / 2, f.getNumerator());\n		assertEquals(1, f.getDenominator());\n\n	public void testReduce() {\n		// ...\n		f = Fraction.getFraction(Integer.MIN_VALUE, 2);\n		result = f.reduce();\n		assertEquals(Integer.MIN_VALUE / 2, result.getNumerator());\n		assertEquals(1, result.getDenominator());\n\n\n\n", 
	"remain":"\n\nThe greatestCommonDivisor method in class Fraction does not find the gcd of Integer.MIN_VALUE and 2^k, and this case can be triggered by taking Integer.MIN_VALUE as the numerator. Note that the case of taking Integer.MIN_VALUE as the denominator is handled explicitly in the getReducedFraction factory method.\nFractionTest.java\n		// ...\n		assertEquals(Integer.MIN_VALUE / 2, f.getNumerator());\n\n	public void testReduce() {\n		result = f.reduce();\n		assertEquals(1, result.getDenominator());\n", 
	"source":"// additional test cases\n\n	public void testReducedFactory_int_int() {\n		// ...\n\n		f = Fraction.getReducedFraction(Integer.MIN_VALUE, 2);\n		assertEquals(Integer.MIN_VALUE / 2, f.getNumerator());\n		assertEquals(1, f.getDenominator());\n	public void testReduce() {\n		// ...\n\n		f = Fraction.getFraction(Integer.MIN_VALUE, 2);\n		result = f.reduce();\n		assertEquals(Integer.MIN_VALUE / 2, result.getNumerator());\n		assertEquals(1, result.getDenominator());", 
	"talks":"", 
	"traces":[], 
	"enums":[]}