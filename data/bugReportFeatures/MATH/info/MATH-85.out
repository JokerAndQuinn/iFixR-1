{
	"desc":"\n\ngetSumSquaredErrors returns -ve value. See test below:\npublic void testSimpleRegression() {\n		double[] y = \n{  8915.102, 8919.302, 8923.502}\n;\n		double[] x = \n{ 1.107178495, 1.107264895, 1.107351295}\n;\n		double[] x2 = \n{ 1.107178495E2, 1.107264895E2, 1.107351295E2}\n;\n		SimpleRegression reg = new SimpleRegression();\n		for (int i = 0; i < x.length; i++) \n{\n			reg.addData(x[i],y[i]);\n		}\n		assertTrue(reg.getSumSquaredErrors() >= 0.0); // OK\n		reg.clear();\n		for (int i = 0; i < x.length; i++) \n{\n			reg.addData(x2[i],y[i]);\n		}\n		assertTrue(reg.getSumSquaredErrors() >= 0.0); // FAIL\n	}\n\n", 
	"remain":"\n\ngetSumSquaredErrors returns -ve value. See test below:\n{  8915.102, 8919.302, 8923.502}\n		double[] x = \n;\n{ 1.107178495E2, 1.107264895E2, 1.107351295E2}\n		SimpleRegression reg = new SimpleRegression();\n{\n		}\n		reg.clear();\n{\n		}\n	}\n", 
	"source":"public void testSimpleRegression() {\n		double[] y = \n{  8915.102, 8919.302, 8923.502}\n;\n		double[] x = \n{ 1.107178495, 1.107264895, 1.107351295}\n;\n		double[] x2 = \n{ 1.107178495E2, 1.107264895E2, 1.107351295E2}\n;\n		SimpleRegression reg = new SimpleRegression();\n		for (int i = 0; i < x.length; i++) \n{\n			reg.addData(x[i],y[i]);\n		}\n		assertTrue(reg.getSumSquaredErrors() >= 0.0); // OK\n		reg.clear();\n		for (int i = 0; i < x.length; i++) \n{\n			reg.addData(x2[i],y[i]);\n		}\n		assertTrue(reg.getSumSquaredErrors() >= 0.0); // FAIL\n	}", 
	"talks":"", 
	"traces":[], 
	"enums":[]}