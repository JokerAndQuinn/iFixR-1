{
	"desc":"\n\nI found a bug in the toDouble() method of the Dfp class.\nIf the Dfp's value is 0 \"zero\", the toDouble() method returns a  negative infini.\nThis is because the double value returned has an exposant equal to 0xFFF \nand a significand is equal to 0.\nIn the IEEE754 this is a -inf.\nTo be equal to zero, the exposant and the significand must be equal to zero.\nA simple test case is :\n----------------------------------------------\nimport org.apache.commons.math.dfp.DfpField;\npublic class test {\n	/**\n\n@param args\n	 */\n	public static void main(String[] args) \n{\n		DfpField field = new DfpField(100);\n		System.out.println(\"toDouble value of getZero() =\"+field.getZero().toDouble()+\n				\"\\ntoDouble value of newDfp(0.0) =\"+\n				field.newDfp(0.0).toDouble());\n	}\n}\n\nMay be the simplest way to fix it is to test the zero equality at the begin of the toDouble() method, to be able to return the correctly signed zero ?\n\n", 
	"remain":"\n\nI found a bug in the toDouble() method of the Dfp class.\nIf the Dfp's value is 0 \"zero\", the toDouble() method returns a  negative infini.\nThis is because the double value returned has an exposant equal to 0xFFF \nand a significand is equal to 0.\nIn the IEEE754 this is a -inf.\nTo be equal to zero, the exposant and the significand must be equal to zero.\nA simple test case is :\n----------------------------------------------\n	/**\n\n	 */\n{\n		System.out.println(\"toDouble value of getZero() =\"+field.getZero().toDouble()+\n				field.newDfp(0.0).toDouble());\n}\n\nMay be the simplest way to fix it is to test the zero equality at the begin of the toDouble() method, to be able to return the correctly signed zero ?\n", 
	"source":"import org.apache.commons.math.dfp.DfpField;\npublic class test {\n	/**\n\n@param args\n	 */\n	public static void main(String[] args) \n{\n		DfpField field = new DfpField(100);\n		System.out.println(\"toDouble value of getZero() =\"+field.getZero().toDouble()+\n				\"\\ntoDouble value of newDfp(0.0) =\"+\n				field.newDfp(0.0).toDouble());\n	}\n}", 
	"talks":"", 
	"traces":[], 
	"enums":[]}